{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet CartComponent = class CartComponent {\n  constructor(cartService) {\n    this.cartService = cartService;\n    this.items = this.cartService.getItems();\n    this.total = this.cartService.getTotal();\n  }\n  ngOnInit() {\n    this.initConfig();\n  }\n  initConfig() {\n    this.payPalConfig = {\n      currency: 'EUR',\n      clientId: 'AdoKj9ST1YhKPvuMpMC0BF8WLoGXuAzjTpHQ2-MeZyQYJYhcK-VytrVyyFvDRj4R_8z7H57n5iyeP_XY',\n      createOrderOnClient: data => ({\n        intent: 'CAPTURE',\n        purchase_units: [{\n          amount: {\n            currency_code: 'EUR',\n            value: '9.99',\n            breakdown: {\n              item_total: {\n                currency_code: 'EUR',\n                value: '9.99'\n              }\n            }\n          },\n          items: [{\n            name: 'Enterprise Subscription',\n            quantity: '1',\n            category: 'DIGITAL_GOODS',\n            unit_amount: {\n              currency_code: 'EUR',\n              value: '9.99'\n            }\n          }]\n        }]\n      }),\n      advanced: {\n        commit: 'true'\n      },\n      style: {\n        label: 'paypal',\n        layout: 'vertical'\n      },\n      onApprove: (data, actions) => {\n        console.log('onApprove - transaction was approved, but not authorized', data, actions);\n        actions.order.get().then(details => {\n          console.log('onApprove - you can get full order details inside onApprove: ', details);\n        });\n      },\n      onClientAuthorization: data => {\n        console.log('onClientAuthorization - you should probably inform your server about completed transaction at this point', data);\n        //this.showSuccess = true;\n      },\n\n      onCancel: (data, actions) => {\n        console.log('OnCancel', data, actions);\n      },\n      onError: err => {\n        console.log('OnError', err);\n      },\n      onClick: (data, actions) => {\n        console.log('onClick', data, actions);\n      }\n    };\n  }\n};\nCartComponent = __decorate([Component({\n  selector: 'app-cart',\n  templateUrl: './cart.component.html',\n  styleUrls: ['./cart.component.css']\n})], CartComponent);\nexport { CartComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAW1C,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAKxBC,YACUC,WAAyB;IAAzB,gBAAW,GAAXA,WAAW;IAJrB,UAAK,GAAG,IAAI,CAACA,WAAW,CAACC,QAAQ,EAAE;IACnC,UAAK,GAAG,IAAI,CAACD,WAAW,CAACE,QAAQ,EAAE;EAI/B;EAIJC,QAAQ;IACN,IAAI,CAACC,UAAU,EAAE;EACnB;EAEQA,UAAU;IAChB,IAAI,CAACC,YAAY,GAAG;MACpBC,QAAQ,EAAE,KAAK;MACfC,QAAQ,EAAE,kFAAkF;MAC5FC,mBAAmB,EAAGC,IAAI,KAA0B;QAClDC,MAAM,EAAE,SAAS;QACjBC,cAAc,EAAE,CACd;UACEC,MAAM,EAAE;YACNC,aAAa,EAAE,KAAK;YACpBC,KAAK,EAAE,MAAM;YACbC,SAAS,EAAE;cACTC,UAAU,EAAE;gBACVH,aAAa,EAAE,KAAK;gBACpBC,KAAK,EAAE;;;WAGZ;UACDG,KAAK,EAAE,CACL;YACEC,IAAI,EAAE,yBAAyB;YAC/BC,QAAQ,EAAE,GAAG;YACbC,QAAQ,EAAE,eAAe;YACzBC,WAAW,EAAE;cACXR,aAAa,EAAE,KAAK;cACpBC,KAAK,EAAE;;WAEV;SAEJ;OAEJ;MACDQ,QAAQ,EAAE;QACRC,MAAM,EAAE;OACT;MACDC,KAAK,EAAE;QACLC,KAAK,EAAE,QAAQ;QACfC,MAAM,EAAE;OACT;MACDC,SAAS,EAAE,CAAClB,IAAI,EAAEmB,OAAO,KAAI;QAC3BC,OAAO,CAACC,GAAG,CAAC,0DAA0D,EAAErB,IAAI,EAAEmB,OAAO,CAAC;QACtFA,OAAO,CAACG,KAAK,CAACC,GAAG,EAAE,CAACC,IAAI,CAAEC,OAAY,IAAI;UACxCL,OAAO,CAACC,GAAG,CAAC,+DAA+D,EAAEI,OAAO,CAAC;QACvF,CAAC,CAAC;MACJ,CAAC;MACDC,qBAAqB,EAAG1B,IAAI,IAAI;QAC9BoB,OAAO,CAACC,GAAG,CAAC,0GAA0G,EAAErB,IAAI,CAAC;QAC7H;MACF,CAAC;;MACD2B,QAAQ,EAAE,CAAC3B,IAAI,EAAEmB,OAAO,KAAI;QAC1BC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAErB,IAAI,EAAEmB,OAAO,CAAC;MACxC,CAAC;MACDS,OAAO,EAAEC,GAAG,IAAG;QACbT,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEQ,GAAG,CAAC;MAC7B,CAAC;MACDC,OAAO,EAAE,CAAC9B,IAAI,EAAEmB,OAAO,KAAI;QACzBC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAErB,IAAI,EAAEmB,OAAO,CAAC;MACvC;KACD;EACD;CACD;AA3EY9B,aAAa,eANzBD,SAAS,CAAC;EACT2C,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,GAEW5C,aAAa,CA2EzB;SA3EYA,aAAa","names":["Component","CartComponent","constructor","cartService","getItems","getTotal","ngOnInit","initConfig","payPalConfig","currency","clientId","createOrderOnClient","data","intent","purchase_units","amount","currency_code","value","breakdown","item_total","items","name","quantity","category","unit_amount","advanced","commit","style","label","layout","onApprove","actions","console","log","order","get","then","details","onClientAuthorization","onCancel","onError","err","onClick","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["E:\\Chris\\ShopCart\\src\\app\\cart\\cart.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { IPayPalConfig, ICreateOrderRequest } from 'ngx-paypal';\r\nimport { CartService } from '../cart.service';\r\nimport { MessageService } from 'primeng/api';\r\n\r\n@Component({\r\n  selector: 'app-cart',\r\n  templateUrl: './cart.component.html',\r\n  styleUrls: ['./cart.component.css']\r\n})\r\n\r\nexport class CartComponent {\r\n\r\n  items = this.cartService.getItems();\r\n  total = this.cartService.getTotal();\r\n\r\n  constructor(\r\n    private cartService: CartServiceS\r\n  ) { }\r\n \r\n  public payPalConfig?: IPayPalConfig;\r\n\r\n  ngOnInit(): void {\r\n    this.initConfig();\r\n  }\r\n\r\n  private initConfig(): void {\r\n    this.payPalConfig = {\r\n    currency: 'EUR',\r\n    clientId: 'AdoKj9ST1YhKPvuMpMC0BF8WLoGXuAzjTpHQ2-MeZyQYJYhcK-VytrVyyFvDRj4R_8z7H57n5iyeP_XY',\r\n    createOrderOnClient: (data) => <ICreateOrderRequest>{\r\n      intent: 'CAPTURE',\r\n      purchase_units: [\r\n        {\r\n          amount: {\r\n            currency_code: 'EUR',\r\n            value: '9.99',\r\n            breakdown: {\r\n              item_total: {\r\n                currency_code: 'EUR',\r\n                value: '9.99'\r\n              }\r\n            }\r\n          },\r\n          items: [\r\n            {\r\n              name: 'Enterprise Subscription',\r\n              quantity: '1',\r\n              category: 'DIGITAL_GOODS',\r\n              unit_amount: {\r\n                currency_code: 'EUR',\r\n                value: '9.99',\r\n              },\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    advanced: {\r\n      commit: 'true'\r\n    },\r\n    style: {\r\n      label: 'paypal',\r\n      layout: 'vertical'\r\n    },\r\n    onApprove: (data, actions) => {\r\n      console.log('onApprove - transaction was approved, but not authorized', data, actions);\r\n      actions.order.get().then((details: any) => {\r\n        console.log('onApprove - you can get full order details inside onApprove: ', details);\r\n      });\r\n    },\r\n    onClientAuthorization: (data) => {\r\n      console.log('onClientAuthorization - you should probably inform your server about completed transaction at this point', data);\r\n      //this.showSuccess = true;\r\n    },\r\n    onCancel: (data, actions) => {\r\n      console.log('OnCancel', data, actions);\r\n    },\r\n    onError: err => {\r\n      console.log('OnError', err);\r\n    },\r\n    onClick: (data, actions) => {\r\n      console.log('onClick', data, actions);\r\n    },\r\n  };\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}